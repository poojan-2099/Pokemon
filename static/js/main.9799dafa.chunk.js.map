{"version":3,"sources":["actions/pokemonActions.js","containers/PokemonList.js","containers/Pokemon.js","App.js","serviceWorker.js","reducers/PokemonListReducer.js","reducers/PokemonMultipleReducer.js","reducers/RootReducer.js","Store.js","index.js"],"names":["GetPokemonList","page","dispatch","a","type","offset","axios","get","res","payload","data","PokemonList","props","useState","search","setSearch","useDispatch","pokemonList","useSelector","state","React","useEffect","FetchData","className","onChange","e","target","value","onClick","history","push","loading","_","isEmpty","errorMsg","map","el","name","to","pageCount","Math","ceil","count","pageRangeDisplayed","marginPagesDisplayed","onPageChange","selected","containerClassName","Pokemon","pokemonName","match","params","pokemon","pokemonState","class","pokeData","src","sprites","front_default","alt","back_default","front_shiny","back_shiny","stats","stat","base_stat","abilities","ability","ShowData","App","path","exact","component","Boolean","window","location","hostname","DefaultState","PokemonListReducer","action","results","PokemonMultipleReducer","RootReducer","combineReducers","Store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9799dafa.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport const GetPokemonList = (page) => async dispatch => {\n  try {\n    dispatch({\n      type: \"POKEMON_LIST_LOADING\"\n    });\n\n    const perPage = 15;\n    const offset = (page * perPage) - perPage;\n\n    const res = await axios.get(`https://pokeapi.co/api/v2/pokemon?limit=${perPage}&offset=${offset}`)\n\n    dispatch({\n      type: \"POKEMON_LIST_SUCCESS\", \n      payload: res.data\n    })\n  } catch (e) {\n    dispatch({\n      type: \"POKEMON_LIST_FAIL\",\n    })\n  }\n};\n\nexport const GetPokemon = (pokemon) => async dispatch => {\n  try {\n    dispatch({\n      type: \"POKEMON_MULTIPLE_LOADING\"\n    });\n\n    const res = await axios.get(`https://pokeapi.co/api/v2/pokemon/${pokemon}`);\n\n    dispatch({\n      type: \"POKEMON_MULTIPLE_SUCCESS\",\n      payload: res.data,\n      pokemonName: pokemon\n    })\n  } catch (e) {\n    dispatch({\n      type: \"POKEMON_MULTIPLE_FAIL\",\n    })\n  }\n};","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport _ from \"lodash\";\nimport { GetPokemonList } from \"../actions/pokemonActions\";\nimport { Link } from \"react-router-dom\";\nimport ReactPaginate from \"react-paginate\";\n\nconst PokemonList = (props) => {\n  const [search, setSearch] = useState(\"\");\n  const dispatch = useDispatch();\n  const pokemonList = useSelector(state => state.PokemonList);\n\n // eslint-disable-next-line\n  React.useEffect(() => {\n  \n    FetchData(1);\n  }, []);\n  // eslint-disable-next-line\n  const FetchData=(page=1)=>{\n\n    dispatch(GetPokemonList(page))\n  }\n\n\n  const ShowData = () => {\n    if (pokemonList.loading) {\n      return <p>Loading...</p>\n    }\n\n    if (!_.isEmpty(pokemonList.data)) {\n      return (\n        <div className={\"list-wrapper\"}>\n          {pokemonList.data.map(el => {\n            return (\n              <div className={\"pokemon-item\"}>\n                <p>{el.name}</p>\n                <Link to={`/pokemon/${el.name}`}>View</Link>\n              </div>\n            )\n          })}\n        </div>\n      )\n    }\n\n    if (pokemonList.errorMsg !== \"\") {\n      return <p>{pokemonList.errorMsg}</p>\n    }\n\n    return <p>unable to get data</p>\n  };\n\n  return (\n    <div>\n      <div className={\"search-wrapper\"}>\n        <p>Search: </p>\n        <input type=\"text\" onChange={e => setSearch(e.target.value)} />\n        <button onClick={() => props.history.push(`/pokemon/${search}`)}>Search</button>{/* history is from react-router-dom package */}\n      </div>\n      {ShowData()}\n      {!_.isEmpty(pokemonList.data) && (\n        <ReactPaginate\n          pageCount={Math.ceil(pokemonList.count / 15)}\n          pageRangeDisplayed={2}\n          marginPagesDisplayed={1}\n          onPageChange={(data) => FetchData(data.selected + 1)}\n          containerClassName={\"pagination\"}\n        />\n      )}\n    </div>\n  )\n};\n\nexport default PokemonList","import React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {GetPokemon} from \"../actions/pokemonActions\";\nimport _ from \"lodash\";\n\nconst Pokemon = (props) => {\n  const pokemonName = props.match.params.pokemon;\n  const dispatch = useDispatch();\n  const pokemonState = useSelector(state => state.Pokemon);\n\n  // eslint-disable-next-line\n  React.useEffect(() => {\n    dispatch(GetPokemon(pokemonName))\n  },[]);\n\n  const ShowData = () => {\n    if (!_.isEmpty(pokemonState.data[pokemonName])) {\n      const pokeData = pokemonState.data[pokemonName];\n      return(\n        <div className={\"pokemon-wrapper\"}>\n          <div className={\"item\"}>\n            <h1>Sprites</h1>\n            <img src={pokeData.sprites.front_default} alt=\"\"/>\n            <img src={pokeData.sprites.back_default} alt=\"\"/>\n            <img src={pokeData.sprites.front_shiny} alt=\"\"/>\n            <img src={pokeData.sprites.back_shiny} alt=\"\"/>\n          </div>\n          <div className=\"item\">\n            <h1>Stats</h1>\n            {pokeData.stats.map(el => {\n              return <p>{el.stat.name} {el.base_stat}</p>\n            })}\n          </div>\n          <div className=\"item\">\n            <h1>Abilities</h1>\n            {pokeData.abilities.map(el => {\n              return <p>{el.ability.name}</p>\n            })}\n          </div>\n        </div>\n      )\n    }\n\n    if (pokemonState.loading) {\n      return <p>Loading...</p>\n    }\n\n    if (pokemonState.errorMsg !== \"\") {\n      return <p>{pokemonState.errorMsg}</p>\n    }\n\n    return <p>error getting pokemon</p>\n  }\n\n  return(\n    <div className={\"poke\"}>\n      <h1 class=\"capitalize\">{pokemonName}</h1>\n      {ShowData()}\n    </div>\n  )\n};\n\nexport default Pokemon","import React from 'react';\nimport './App.css';\nimport {Switch, Route, NavLink, Redirect} from \"react-router-dom\";\nimport PokemonList from \"./containers/PokemonList\";\nimport Pokemon from \"./containers/Pokemon\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav>\n       <NavLink to={\"/\"}>Pokemon</NavLink>\n       <NavLink to={\"/\"}>Return</NavLink>\n      </nav>\n      <Switch>\n        <Route path={\"/\"} exact component={PokemonList} />\n        <Route path={\"/pokemon/:pokemon\"} exact component={Pokemon} />\n        <Redirect to={\"/\"} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const DefaultState = {\n  loading: false,\n  data: [],\n  errorMsg: \"\",\n  count: 0\n};\n\nconst PokemonListReducer = (state = DefaultState, action) => {\n  switch (action.type) {\n    case \"POKEMON_LIST_LOADING\":\n      return {\n        ...state,\n        loading: true,\n        errorMsg: \"\"\n      };\n    case \"POKEMON_LIST_FAIL\":\n      return {\n        ...state,\n        loading: false,\n        errorMsg: \"unable to get pokemon\"\n      };\n    case \"POKEMON_LIST_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        data: action.payload.results,\n        errorMsg: \"\",\n        count: action.payload.count\n      };\n    default:\n      return state;\n  }\n};\n\nexport default PokemonListReducer","const DefaultState = {\n  loading: false,\n  data: {},\n  errorMsg: \"\"\n};\n\nconst PokemonMultipleReducer = (state = DefaultState, action) => {\n  switch (action.type) {\n    case \"POKEMON_MULTIPLE_LOADING\":\n      return {\n        ...state,\n        loading: true,\n        errorMsg: \"\"\n      };\n    case \"POKEMON_MULTIPLE_FAIL\":\n      return {\n        ...state,\n        loading: false,\n        errorMsg: \"unable to find pokemon\"\n      };\n    case \"POKEMON_MULTIPLE_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        errorMsg: \"\",\n        data: {\n          ...state.data,\n          [action.pokemonName]: action.payload\n        }\n      };\n    default:\n      return state\n  }\n};\n\nexport default PokemonMultipleReducer","import {combineReducers} from \"redux\";\nimport PokemonListReducer from \"./PokemonListReducer\";\nimport PokemonMultipleReducer from \"./PokemonMultipleReducer\";\n\nconst RootReducer = combineReducers({\n  PokemonList: PokemonListReducer,\n  Pokemon: PokemonMultipleReducer\n});\n\nexport default RootReducer;","import {createStore} from \"redux\";\nimport {composeWithDevTools} from \"redux-devtools-extension\";\nimport {applyMiddleware} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport RootReducer from \"./reducers/RootReducer\";\n\nconst Store = createStore(RootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default Store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport Store from \"./Store\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={Store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}